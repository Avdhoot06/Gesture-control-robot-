#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <Servo.h>

WiFiClient client;
Servo myservo;
Servo myservo_up_down;
Servo myservo_forward_backward;
ESP8266WebServer server(80);

const char* ssid = "Robohawk";
const char* password = "Robohawk123";

const int gripperOpenAngle = 45;
const int gripperClosedAngle = 0;
const int gripper_up_down_servo_angle = 0;
const int gripper_forward_backward_servo_angle = 0;

int robospeed =400; // Defining speed limit min 400 to max 1023

String direction = "";
String servo_clamp = "";


int RMotor_1 = 0;//d3
int RMotor_2 = 4;//d2
int LMotor_1 = 13;//d7
int LMotor_2 = 15;//d8

int REnable = 14;//d5
int LEnable = 12;//d6

int grabPin_grabber = 2;//d4
int grabpin_up_down = 1; //TX
int grabpin_forward_back = 10;//S3


// Function prototypes
void openGripper();
void closeGripper();
void handleRoot();
void handleOpen();
void handleClose();
void connectingToWiFi();
void move_forward();
void move_backward();
void turn_right();
void turn_left();
void move_stop();
void open_grabbing_arm();
void close_grabbing_arm();
// void up_down_servo();//Clock-UP, Anti-Down
// void forward_backward_servo();
// void up_down_servo(){

// }


void connectingToWiFi()
{
  delay(3000);
  WiFi.disconnect();
  delay(1000);
  Serial.println("Connecting to WiFi");
  WiFi.begin(ssid, password);
  while (!(WiFi.status() == WL_CONNECTED))
  {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("Connected");
  Serial.println("Local IP is : ");
  Serial.print((WiFi.localIP().toString()));
  delay(5000);
  }


void setup() {
  Serial.begin(115200);
  pinMode(RMotor_1, OUTPUT);
  pinMode(RMotor_2, OUTPUT);
  pinMode(LMotor_1, OUTPUT);
  pinMode(LMotor_2, OUTPUT);
  pinMode(REnable, OUTPUT);
  pinMode(LEnable, OUTPUT);
  pinMode(grabPin_grabber, OUTPUT);
  pinMode(grabpin_up_down, OUTPUT);
  pinMode(grabpin_forward_back, OUTPUT);
  

  myservo.attach(2);
  myservo.write(gripperClosedAngle);
  myservo_up_down.attach(1);
  myservo_up_down.write(gripper_up_down_servo_angle);//initial stage of up servo
  myservo_forward_backward.attach(10);
  myservo_forward_backward.write(gripper_forward_backward_servo_angle);//initial stage of forward servo
  

  connectingToWiFi();

  server.on("/", HTTP_GET, handleRoot);
  server.on("/O", HTTP_GET, handleOpen);
  server.on("/C", HTTP_GET, handleClose);

  // server.on("/", HTTP_GET, handleRoot);
  server.on("/U", HTTP_GET, handleOpen);
  server.on("/D", HTTP_GET, handleClose);

  // server.on("/", HTTP_GET, handleRoot);
  server.on("/F", HTTP_GET, handleOpen);
  server.on("/B", HTTP_GET, handleClose);

  server.begin();
  analogWrite(REnable, 800);
  analogWrite(LEnable, 800);
}

  void handleRoot() {
  // server.send(200, "text/html", "<h1>ESP8266 Gripper Control</h1>");

  // server.send(200, "text/html", "<h1>forupanddownservo</h1>");
  // server.send(200, "text/html", "<h1>forforwardandbackwardservo</h1>");
  
String htmlContent = "<h1>ESP8266 Gripper Control</h1>";
  htmlContent += "<h1>forupanddownservo</h1>";
  htmlContent += "<h1>forforwardandbackwardservo</h1>";
  server.send(200, "text/html", htmlContent);


}
////problematic stage
void handleOpen() {
  openGripper();
//   server.send(200, "text/html", "Gripper opened");
//   server.send(200, "text/html", "<h1>upservo</h1>");
//   server.send(200, "text/html", "<h1>forwardservo</h1>");
String htmlContent = "Gripper opened";
  htmlContent += "<h1>upservo</h1>";
  htmlContent += "<h1>forwardservo</h1>";
  server.send(200, "text/html", htmlContent);

}

void handleClose() {
  closeGripper();
//   server.send(200, "text/html", "Gripper closed");
//   server.send(200, "text/html", "<h1>downservo</h1>");
//   server.send(200, "text/html", "<h1>backwardservo</h1>");
 String htmlContent = "Gripper closed";
  htmlContent += "<h1>downservo</h1>";
  htmlContent += "<h1>backwardservo</h1>";
  server.send(200, "text/html", htmlContent);
}

  


void loop() {
  server.handleClient();
  String direction = server.arg("direction");
  String servo_clamp = server.arg("servo_clamp");

  if (!direction.isEmpty()) {
    if (direction.equals("F")) move_forward();
    else if (direction.equals("B")) move_backward();
    else if (direction.equals("R")) turn_right();
    else if (direction.equals("L")) turn_left();
    else if (direction.equals("S")) move_stop();
  }

  if (!servo_clamp.isEmpty()) {
    if (servo_clamp.equals("/O")) open_grabbing_arm();
    else if (servo_clamp.equals("/C")) close_grabbing_arm();
    else Serial.println("Unknown gripper command");
  }

   if (!servo_clamp.isEmpty()) {
    if (servo_clamp.equals("/U")) up_arm();
    else if (servo_clamp.equals("/D")) down_arm();
    else Serial.println("Unknown gripper command");
  }

   if (!servo_clamp.isEmpty()) {
    if (servo_clamp.equals("/F")) forward_arm();
    else if (servo_clamp.equals("/B")) backward_arm();
    else Serial.println("Unknown gripper command");
  }
}

void move_forward() {
  digitalWrite(RMotor_1, LOW);
  digitalWrite(RMotor_2, HIGH);
  digitalWrite(LMotor_1, HIGH);
  digitalWrite(LMotor_2, LOW);
}

void move_backward() {
  digitalWrite(RMotor_1, HIGH);
  digitalWrite(RMotor_2, LOW);
  digitalWrite(LMotor_1, LOW);
  digitalWrite(LMotor_2, HIGH);
}

void turn_right() {
  digitalWrite(RMotor_1, LOW);
  digitalWrite(RMotor_2, HIGH);
  digitalWrite(LMotor_1, LOW);
  digitalWrite(LMotor_2, HIGH);
}

void turn_left() {
  digitalWrite(RMotor_1, HIGH);
  digitalWrite(RMotor_2, LOW);
  digitalWrite(LMotor_1, HIGH);
  digitalWrite(LMotor_2, LOW);
}

void move_stop() {
  digitalWrite(RMotor_1, LOW);
  digitalWrite(RMotor_2, LOW);
  digitalWrite(LMotor_1, LOW);
  digitalWrite(LMotor_2, LOW);
}

void open_grabbing_arm() {
  
  int pos;

  for (pos = 0; pos <= 180; pos += 1) {  // goes from 0 degrees to 180 degrees
                                    // in steps of 1 degree
    myservo.write(pos);  // tell servo to go to position in variable 'pos'
    delay(15);           // waits 15ms for the servo to reach the position
  }
  
  // digitalWrite(grabPin, HIGH);
  // digitalRead(gripperOpenAngle);
  delay(1000);
  
}

void close_grabbing_arm() {

  int pos;
  for (pos = 180; pos >= 0; pos -= 1) {  // goes from 180 degrees to 0 degrees
    myservo.write(pos);                  // tell servo to go to position in variable 'pos'
    delay(15);                           // waits 15ms for the servo to reach the position
  }
  
  // digitalWrite(grabPin, LOW);
  // digitalRead(gripperClosedAngle);
  // delay(1000);
}
void up_arm(){
int pos;
for(pos=90;pos>=0;pos--){
  myservo_up_down.write(pos);
  delay(15);
}
}

void down_arm(){
int pos;
for(pos=0;pos<=90;pos++){
  myservo_up_down.write(pos);
  delay(15);
}
}

void forward_arm(){
int pos;
for(pos=0;pos<=30;pos++){
  myservo_forward_backward.write(pos);
  delay(15);
}
}


void backward_arm(){
int pos;
for(pos=30;pos>=0;pos--){
  myservo_forward_backward.write(pos);
  delay(15);
}
}
void openGripper()
{
  myservo.write(gripperOpenAngle);
  digitalWrite(grabPin_grabber, HIGH);
	delay(1000);
}

void closeGripper()
{
  myservo.write(gripperClosedAngle);
  digitalWrite(grabPin_grabber, LOW);
	delay(1000);
}
